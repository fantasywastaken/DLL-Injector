package interfaces;import com.sun.jna.Native;import com.sun.jna.Pointer;import com.sun.jna.Structure;import com.sun.jna.ptr.IntByReference;import com.sun.jna.ptr.PointerByReference;import com.sun.jna.win32.StdCallLibrary;import java.util.Arrays;import java.util.List;public interface Kernel32 extends StdCallLibrary {        Kernel32 INSTANCE = Native.load("kernel32", Kernel32.class);        int PROCESS_ALL_ACCESS = 0x1F0FFF;        int MEM_COMMIT = 0x1000;        int MEM_RESERVE = 0x2000;        int PAGE_EXECUTE_READWRITE = 0x40;        int MEM_RELEASE = 0x8000;        int TH32CS_SNAPMODULE = 0x00000008;        Pointer INVALID_HANDLE_VALUE = new Pointer(-1);        Pointer OpenProcess(int dwDesiredAccess, boolean bInheritHandle, int dwProcessId);        Pointer VirtualAllocEx(Pointer hProcess, Pointer lpAddress, int dwSize, int flAllocationType, int flProtect);        boolean VirtualFreeEx(Pointer hProcess, Pointer lpAddress, int dwSize, int dwFreeType);        boolean WriteProcessMemory(Pointer hProcess, Pointer lpBaseAddress, byte[] lpBuffer, int nSize, IntByReference lpNumberOfBytesWritten);        Pointer GetProcAddress(Pointer hModule, String lpProcName);        Pointer CreateRemoteThread(Pointer hProcess, Pointer lpThreadAttributes, int dwStackSize, Pointer lpStartAddress, Pointer lpParameter, int dwCreationFlags, PointerByReference lpThreadId);        boolean CloseHandle(Pointer hObject);        int GetLastError();        Pointer GetModuleHandleA(String lpModuleName);        Pointer CreateToolhelp32Snapshot(int dwFlags, int th32ProcessID);        boolean Module32FirstW(Pointer hSnapshot, MODULEENTRY32W lpme);        boolean Module32NextW(Pointer hSnapshot, MODULEENTRY32W lpme);        class MODULEENTRY32W extends Structure {                public int dwSize;                public int th32ModuleID;                public int th32ProcessID;                public int GlblcntUsage;                public int ProccntUsage;                public Pointer modBaseAddr;                public int modBaseSize;                public Pointer hModule;                public char[] szModule = new char[256];                public char[] szExePath = new char[260];                @Override                protected List<String> getFieldOrder() {                        return Arrays.asList("dwSize", "th32ModuleID", "th32ProcessID", "GlblcntUsage", "ProccntUsage", "modBaseAddr", "modBaseSize", "hModule", "szModule", "szExePath");                }        }}